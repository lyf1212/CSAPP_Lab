                            | #######################################################################
                            | # Test for copying block of size 10;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f42006000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20a00000000000000 | 	irmovq $10, %rdx		# src and dst have 10 elements
0x014: 30f64805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 807803000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | # Author:李一凡 ID=2100012520@stu.pku.edu.cn
                            | # 优化思路1：将原来的“先把常数移到寄存器中再做运算”的方法改成使用iaddq实现，减少冗余；(13.70)
                            | # 优化思路2：将Always Taken的分支预测方法改成BTFNT, 提高预测准确性。不过由于现在程序中分支并不多，所以这条方法没有很大改进；(13.63)
                            | # 优化点：Y86-64处理器默认寄存器存储的是0，所以一开始的那个异或是没必要的；(13.56)
                            | # 优化点：在mrmovq和rmmovq之间插入无关痛痒的%rdi+=8，因为后一个mov在前一个访存之后才能接收到数据转发，而这造成了一个阶段的暂停。把第一遍改漏的subq也换成iaddq；(11.56)
                            | # 优化点：每次对len减一的时候总是andq判断一下再跳转，实际上跳转之前只要没有其他运算就可以了；（10.56）
                            | # 优化思路3：按len-=2展开循环。一开始先把len-2，判断有没有资格进入设计出来的Loop_double。每次从Loop_double出来都要先-2，判断有没有再次进入Loop_double的资格。
                            | # 每次发现没有进入的资格就直接跳到Once 里面。由于%rdx比2小但是每次只是减去2，所以这个部分会判断%rdx是0(直接返回到Done)还是1(按照Once中的语句再ncopy一次)；(8.73)
                            | # 优化思路4：按len-=3展开循环。与思路3类似，只是在最后跳出的判断出有差异。我选择先把由于小于3而不能进入下一次Loop_trible的%rdx先加上2，这样原来的0是负的，1是equal，2是正的。然后跳转到各自的处理模块中即可；(8.12)
                            | # 优化思路5：按len-=4展开循环。与上述过程类似，在第一个mrmov的地方利用bubble多复制一个，之后滚雪球。最后判断余数的时候，先加上3，再看大于或小于。等于只用执行一次。如果执行3次，先把最后一个复制过去，剩下两个与复制两次的用同一片代码，便于之后展开规模更大时不超字节限制；(7.90)
                            | # 优化思路6：按len-=6展开循环。处理余数的时候没什么技巧，只是加了一些数然后分成-1,0和从1开始的正数。如果不能完全分开就减一些数，仍然把他们分成-1,0,,一些正数......
                            | # 目前ncopy.yo的字节数637, 最后处理余数的环节出现了不少bubble；(7.76)
                            | # 优化思路7：按len-=8展开，与之前相似，不再赘述。由于没有找到合适的方法处理最后余数部分的的bubble，对于前面数据规模较小的测试来说反而是负优化；(7.75)
                            | # 优化思路8：利用书后题4.57提到的加载转发，合理优化mrmov和rmmov连起来的余数处理的部分；(7.63)	(同样处理但是AT分支预测CPE=7.71)
                            | 
                            | 
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	# xorq %rax,%rax		# count = 0;
                            | 
                            | 
0x03b: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x045: 72b401000000000000   | 	jl Last
                            | 
                            | 	
0x04e:                      | Loop_eight:	
0x04e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x058: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# Destory this bubble.
0x062: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x06c: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 	# jle L1		# if so, goto L1	(Across iaddq):
0x06e: c0f00100000000000000 | 	iaddq $1, %rax		# irmovq $1, %r10
                            | 						# addq %r10, %rax		# count++
0x078:                      | L1:	
0x078: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x082: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x08c: 62bb                 | 	andq %r11, %r11
0x08e: 71a100000000000000   | 	jle L2
0x097: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0a1:                      | L2:
0x0a1: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0ab: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0b5: 62aa                 | 	andq %r10, %r10
0x0b7: 71ca00000000000000   | 	jle L3
0x0c0: c0f00100000000000000 | 	iaddq $1, %rax
0x0ca:                      | L3:
0x0ca: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x0d4: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0de: 62bb                 | 	andq %r11, %r11
0x0e0: 71f300000000000000   | 	jle L4
0x0e9: c0f00100000000000000 | 	iaddq $1, %rax
0x0f3:                      | L4:
0x0f3: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11
0x0fd: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x107: 62aa                 | 	andq %r10, %r10
0x109: 711c01000000000000   | 	jle L5
0x112: c0f00100000000000000 | 	iaddq $1, %rax
0x11c:                      | L5:
0x11c: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x126: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)
0x130: 62bb                 | 	andq %r11, %r11
0x132: 714501000000000000   | 	jle L6
0x13b: c0f00100000000000000 | 	iaddq $1, %rax
0x145:                      | L6:
0x145: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11
0x14f: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x159: 62aa                 | 	andq %r10, %r10
0x15b: 716e01000000000000   | 	jle L7
0x164: c0f00100000000000000 | 	iaddq $1, %rax
0x16e:                      | L7:
0x16e: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)
0x178: 62bb                 | 	andq %r11, %r11
0x17a: 718d01000000000000   | 	jle L8
0x183: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x18d:                      | L8:
0x18d: c0f74000000000000000 | 	iaddq $64, %rdi		# src += 8
0x197: c0f64000000000000000 | 	iaddq $64, %rsi		# dst += 8
0x1a1: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x1ab: 754e00000000000000   | 	jge Loop_eight		# if %rdx >= 8, goto Loop again:
                            | 
0x1b4:                      | Last:
0x1b4: c0f20700000000000000 | 	iaddq $7, %rdx
0x1be: 727703000000000000   | 	jl Done
0x1c7: 76fa01000000000000   | 	jg Judge_remain		# 对应着原来的2,3,4,5,6,7.
0x1d0: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x1da: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1e4: 62aa                 | 	andq %r10, %r10
0x1e6: 717703000000000000   | 	jle Done
0x1ef: c0f00100000000000000 | 	iaddq $1, %rax
0x1f9: 90                   | 	ret
                            | 
0x1fa:                      | Judge_remain:
0x1fa: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x204: 722403000000000000   | 	jl Loop_twice
0x20d: 73fb02000000000000   | 	je Loop_three
0x216: 761f02000000000000   | 	jg Judge_four_to_seven
                            | 
0x21f:                      | Judge_four_to_seven:
0x21f: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x229: 72d202000000000000   | 	jl Loop_four
0x232: 73a902000000000000   | 	je Loop_five
0x23b: 764402000000000000   | 	jg Judge_six_seven
                            | 
0x244:                      | Judge_six_seven:
0x244: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x24e: 738002000000000000   | 	je Loop_six
                            | 
0x257:                      | Loop_seven:
0x257: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x261: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x26b: 62aa                 | 	andq %r10, %r10
0x26d: 718002000000000000   | 	jle Loop_six
0x276: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x280:                      | Loop_six:
0x280: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x28a: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)
0x294: 62aa                 | 	andq %r10, %r10
0x296: 71a902000000000000   | 	jle Loop_five
0x29f: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x2a9:                      | Loop_five:
0x2a9: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x2b3: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x2bd: 62aa                 | 	andq %r10, %r10
0x2bf: 71d202000000000000   | 	jle Loop_four
0x2c8: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x2d2:                      | Loop_four:
0x2d2: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x2dc: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x2e6: 62aa                 | 	andq %r10, %r10
0x2e8: 71fb02000000000000   | 	jle Loop_three
0x2f1: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x2fb:                      | Loop_three:
0x2fb: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x305: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x30f: 62aa                 | 	andq %r10, %r10
0x311: 712403000000000000   | 	jle Loop_twice
0x31a: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | 
0x324:                      | Loop_twice:
0x324: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x32e: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# Destory the bubble.
0x338: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x342: 62aa                 | 	andq %r10, %r10
0x344: 715703000000000000   | 	jle Second
0x34d: c0f00100000000000000 | 	iaddq $1, %rax
0x357:                      | Second:
0x357: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x361: 62bb                 | 	andq %r11, %r11
0x363: 717703000000000000   | 	jle Done
0x36c: c0f00100000000000000 | 	iaddq $1, %rax
0x376: 90                   | 	ret
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x377:                      | Done:
0x377: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function (AND MAKE SURE THERE IS A BLANKE LINE IN THE END!!!)
0x378:                      | End:
                            | #/* $end ncopy-ys */
0x378:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 5.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x378:                      | check:
                            | 	# Return value test
0x378: 30fa0500000000000000 | 	irmovq $5,%r10
0x382: 61a0                 | 	subq %r10,%rax
0x384: 73a003000000000000   | 	je checkb
0x38d: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x397: 70de04000000000000   | 	jmp cdone
0x3a0:                      | checkb:
                            | 	# Code length check
0x3a0: 30f07803000000000000 | 	irmovq EndFun,%rax
0x3aa: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x3b4: 6120                 | 	subq %rdx,%rax
0x3b6: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x3c0: 6102                 | 	subq %rax,%rdx
0x3c2: 75de03000000000000   | 	jge checkm
0x3cb: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3d5: 70de04000000000000   | 	jmp cdone
0x3de:                      | checkm:
0x3de: 30f24805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3e8: 30f3e004000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3f2: 30f70a00000000000000 | 	irmovq $10,%rdi  # Count
0x3fc: 6277                 | 	andq %rdi,%rdi
0x3fe: 735c04000000000000   | 	je checkpre         # Skip check if count = 0
0x407:                      | mcloop:
0x407: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x411: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x41b: 6160                 | 	subq %rsi,%rax
0x41d: 733904000000000000   | 	je  mok
0x426: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x430: 70de04000000000000   | 	jmp cdone
0x439:                      | mok:
0x439: 30f00800000000000000 | 	irmovq $8,%rax
0x443: 6002                 | 	addq %rax,%rdx	  # dest ++
0x445: 6003                 | 	addq %rax,%rbx    # src++
0x447: 30f00100000000000000 | 	irmovq $1,%rax
0x451: 6107                 | 	subq %rax,%rdi    # cnt--
0x453: 760704000000000000   | 	jg mcloop
0x45c:                      | checkpre:
                            | 	# Check for corruption
0x45c: 30f24005000000000000 | 	irmovq Predest,%rdx
0x466: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x470: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x47a: 6120                 | 	subq %rdx,%rax
0x47c: 739804000000000000   | 	je checkpost
0x485: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x48f: 70de04000000000000   | 	jmp cdone
0x498:                      | checkpost:
                            | 	# Check for corruption
0x498: 30f29805000000000000 | 	irmovq Postdest,%rdx
0x4a2: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x4ac: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x4b6: 6120                 | 	subq %rdx,%rax
0x4b8: 73d404000000000000   | 	je checkok
0x4c1: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x4cb: 70de04000000000000   | 	jmp cdone
0x4d4:                      | checkok:
                            | 	# Successful checks
0x4d4: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4de:                      | cdone:
0x4de: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4e0:                      | 	.align 8
0x4e0:                      | src:
0x4e0: ffffffffffffffff     | 	.quad -1
0x4e8: 0200000000000000     | 	.quad 2
0x4f0: fdffffffffffffff     | 	.quad -3
0x4f8: 0400000000000000     | 	.quad 4
0x500: 0500000000000000     | 	.quad 5
0x508: 0600000000000000     | 	.quad 6
0x510: f9ffffffffffffff     | 	.quad -7
0x518: 0800000000000000     | 	.quad 8
0x520: f7ffffffffffffff     | 	.quad -9
0x528: f6ffffffffffffff     | 	.quad -10
0x530: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x540:                      | 	.align 16
0x540:                      | Predest:
0x540: fadebc0000000000     | 	.quad 0xbcdefa
0x548:                      | dest:
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598:                      | Postdest:
0x598: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5a0:                      | .align 8
                            | # Run time stack
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
                            | 
0x620:                      | Stack:
