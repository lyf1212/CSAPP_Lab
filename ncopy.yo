                            | # Author:李一凡 ID=2100012520@stu.pku.edu.cn
                            | # 优化思路1：将原来的“先把常数移到寄存器中再做运算”的方法改成使用iaddq实现，减少冗余；(13.70)
                            | # 优化思路2：将Always Taken的分支预测方法改成BTFNT, 提高预测准确性。不过由于现在程序中分支并不多，所以这条方法没有很大改进；(13.63)
                            | # 优化点：Y86-64处理器默认寄存器存储的是0，所以一开始的那个异或是没必要的；(13.56)
                            | # 优化点：在mrmovq和rmmovq之间插入无关痛痒的%rdi+=8，因为后一个mov在前一个访存之后才能接收到数据转发，而这造成了一个阶段的暂停。把第一遍改漏的subq也换成iaddq；(11.56)
                            | # 优化点：每次对len减一的时候总是andq判断一下再跳转，实际上跳转之前只要没有其他运算就可以了；（10.56）
                            | # 优化思路3：按len-=2展开循环。一开始先把len-2，判断有没有资格进入设计出来的Loop_double。每次从Loop_double出来都要先-2，判断有没有再次进入Loop_double的资格。
                            | # 每次发现没有进入的资格就直接跳到Once 里面。由于%rdx比2小但是每次只是减去2，所以这个部分会判断%rdx是0(直接返回到Done)还是1(按照Once中的语句再ncopy一次)；(8.73)
                            | # 优化思路4：按len-=3展开循环。与思路3类似，只是在最后跳出的判断出有差异。我选择先把由于小于3而不能进入下一次Loop_trible的%rdx先加上2，这样原来的0是负的，1是equal，2是正的。然后跳转到各自的处理模块中即可；(8.12)
                            | # 优化思路5：按len-=4展开循环。与上述过程类似，在第一个mrmov的地方利用bubble多复制一个，之后滚雪球。最后判断余数的时候，先加上3，再看大于或小于。等于只用执行一次。如果执行3次，先把最后一个复制过去，剩下两个与复制两次的用同一片代码，便于之后展开规模更大时不超字节限制；(7.90)
                            | # 优化思路6：按len-=6展开循环。处理余数的时候没什么技巧，只是加了一些数然后分成-1,0和从1开始的正数。如果不能完全分开就减一些数，仍然把他们分成-1,0,,一些正数......
                            | # 目前ncopy.yo的字节数637, 最后处理余数的环节出现了不少bubble；(7.76)
                            | # 优化思路7：按len-=8展开，与之前相似，不再赘述。由于没有找到合适的方法处理最后余数部分的的bubble，对于前面数据规模较小的测试来说反而是负优化；(7.75)
                            | # 优化思路8：利用书后题4.57提到的加载转发，合理优化mrmov和rmmov连起来的余数处理的部分；(7.63)	(同样处理但是AT分支预测CPE=7.71)
                            | 
                            | 
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	# xorq %rax,%rax		# count = 0;
                            | 
                            | 	# 设法判断运行时环境:
0x000: 62cc                 | 	andq %r12, %r12
0x002: 731203000000000000   | 	je naive_ncopy
                            | 
0x00b: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx
0x015: 726501000000000000   | 	jl Last
                            | 
                            | 	
0x01e:                      | Loop_nine:	
0x01e: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x028: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# Destory this bubble.
0x032: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x03c: 62aa                 | 	andq %r10, %r10		# val <= 0?
                            | 	# jle L1		# if so, goto L1	(Across iaddq):
0x03e: c0f00100000000000000 | 	iaddq $1, %rax		# irmovq $1, %r10
                            | 						# addq %r10, %rax		# count++
0x048:                      | L1:	
0x048: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x052: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x05c: 62bb                 | 	andq %r11, %r11
                            | 	# jle L2
0x05e: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x068:                      | L2:
0x068: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x072: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x07c: 62aa                 | 	andq %r10, %r10
                            | 	# jle L3
0x07e: c0f00100000000000000 | 	iaddq $1, %rax
0x088:                      | L3:
0x088: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x092: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x09c: 62bb                 | 	andq %r11, %r11
                            | 	# jle L4
0x09e: c0f00100000000000000 | 	iaddq $1, %rax
0x0a8:                      | L4:
0x0a8: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11
0x0b2: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x0bc: 62aa                 | 	andq %r10, %r10
                            | 	# jle L5
0x0be: c0f00100000000000000 | 	iaddq $1, %rax
0x0c8:                      | L5:
0x0c8: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x0d2: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)
0x0dc: 62bb                 | 	andq %r11, %r11
                            | 	# jle L6
0x0de: c0f00100000000000000 | 	iaddq $1, %rax
0x0e8:                      | L6:
0x0e8: 50b73800000000000000 | 	mrmovq 56(%rdi), %r11
0x0f2: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x0fc: 62aa                 | 	andq %r10, %r10
                            | 	# jle L7
0x0fe: c0f00100000000000000 | 	iaddq $1, %rax
0x108:                      | L7:
0x108: 50a74000000000000000 | 	mrmovq 64(%rdi), %r10
0x112: 40b63800000000000000 | 	rmmovq %r11, 56(%rsi)
0x11c: 62bb                 | 	andq %r11, %r11
                            | 	# jle L8
0x11e: c0f00100000000000000 | 	iaddq $1, %rax
0x128:                      | L8:
0x128: 40a64000000000000000 | 	rmmovq %r10, 64(%rsi)
0x132: 62aa                 | 	andq %r10, %r10
                            | 	# jle L9
0x134: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x13e:                      | L9:
0x13e: c0f74800000000000000 | 	iaddq $72, %rdi		# src += 9
0x148: c0f64800000000000000 | 	iaddq $72, %rsi		# dst += 9
0x152: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx
0x15c: 751e00000000000000   | 	jge Loop_nine		# if %rdx >= 9, goto Loop again:
                            | 
0x165:                      | Last:
0x165: c0f20800000000000000 | 	iaddq $8, %rdx
0x16f: 726f03000000000000   | 	jl Done
0x178: 76ab01000000000000   | 	jg Judge_remain		# 对应着原来的2,3,4,5,6,7,8.
0x181: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x18b: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x195: 62aa                 | 	andq %r10, %r10
0x197: 716f03000000000000   | 	jle Done
0x1a0: c0f00100000000000000 | 	iaddq $1, %rax
0x1aa: 90                   | 	ret
                            | 
0x1ab:                      | Judge_remain:
0x1ab: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x1b5: 72d102000000000000   | 	jl Loop_twice
0x1be: 73b102000000000000   | 	je Loop_three
0x1c7: 76d001000000000000   | 	jg Judge_four_to_eight
                            | 
0x1d0:                      | Judge_four_to_eight:
0x1d0: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x1da: 729102000000000000   | 	jl Loop_four
0x1e3: 737102000000000000   | 	je Loop_five
0x1ec: 76f501000000000000   | 	jg Judge_six_eight
                            | 
0x1f5:                      | Judge_six_eight:
0x1f5: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x1ff: 725102000000000000   | 	jl Loop_six
0x208: 733102000000000000   | 	je Loop_seven
                            | 
0x211:                      | Loop_eight:
0x211: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10
0x21b: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)
0x225: 62aa                 | 	andq %r10, %r10
                            | 	# jle Loop_seven
0x227: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x231:                      | Loop_seven:
0x231: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10
0x23b: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x245: 62aa                 | 	andq %r10, %r10
                            | 	# jle Loop_six
0x247: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x251:                      | Loop_six:
0x251: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10
0x25b: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)
0x265: 62aa                 | 	andq %r10, %r10
                            | 	# jle Loop_five
0x267: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x271:                      | Loop_five:
0x271: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10
0x27b: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x285: 62aa                 | 	andq %r10, %r10
                            | 	# jle Loop_four
0x287: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x291:                      | Loop_four:
0x291: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x29b: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x2a5: 62aa                 | 	andq %r10, %r10
                            | 	# jle Loop_three
0x2a7: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x2b1:                      | Loop_three:
0x2b1: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x2bb: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x2c5: 62aa                 | 	andq %r10, %r10
                            | 	# jle Loop_twice
0x2c7: c0f00100000000000000 | 	iaddq $1, %rax
                            | 	
                            | 
0x2d1:                      | Loop_twice:
0x2d1: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x2db: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11	# Destory the bubble.
0x2e5: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x2ef: 62aa                 | 	andq %r10, %r10
                            | 	# jle Second
0x2f1: c0f00100000000000000 | 	iaddq $1, %rax
0x2fb:                      | Second:
0x2fb: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)
0x305: 62bb                 | 	andq %r11, %r11
                            | 	# jle Done
0x307: c0f00100000000000000 | 	iaddq $1, %rax
0x311: 90                   | 	ret
                            | 
0x312:                      | naive_ncopy:
0x312: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x314: 716f03000000000000   | 	jle Done		# if so, goto Done:
                            | 
0x31d:                      | Loop:	
0x31d: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x327: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x331: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x33b: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x33d: 715003000000000000   | 	jle Npos		# if so, goto Npos:
0x346: c0f00100000000000000 | 	iaddq $1, %rax		# irmovq $1, %r10
                            | 						# addq %r10, %rax		# count++
0x350:                      | Npos:	
0x350: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		
0x35a: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x364: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x366: 761d03000000000000   | 	jg Loop			# if so, goto Loop:
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x36f:                      | Done:
0x36f: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function (AND MAKE SURE THERE IS A BLANKE LINE IN THE END!!!)
0x370:                      | End:
                            | #/* $end ncopy-ys */
